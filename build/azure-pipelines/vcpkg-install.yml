parameters:
  - name: targets
    default: []
    type: object
  - name: vcpkgDir
    type: string
  - name: targetDirectory
    type: string

steps:
  - powershell: |
      . build/azure-pipelines/win32/exec.ps1
      exec { git clone https://github.com/microsoft/vcpkg.git $(Build.ArtifactStagingDirectory)/vcpkg }
      exec { cd $(Build.ArtifactStagingDirectory)/vcpkg; git checkout 779ce74ef67d3e12d904da1b15f9ed5626d5f677 }
      exec { $(Build.ArtifactStagingDirectory)/vcpkg/bootstrap-vcpkg.bat }
      Write-Output "##vso[task.setvariable variable=VSCODE_DID_BOOTSTRAP_VCPKG]true"
    displayName: Bootstrap vcpkg
    condition: not(eq(variables.VSCODE_DID_BOOTSTRAP_VCPKG, true))

  - ${{ each target in parameters.targets }}:
    - task: Cache@2
      inputs:
        key: '"${{ target }}" | ${{ parameters.vcpkgDir }}/vcpkg.json'
        path: ${{ parameters.targetDirectory }}/${{ target }}
        cacheHitVar: VCPKG_CACHE_RESTORED
      displayName: Cache ${{ target }}

    - script: $(Build.ArtifactStagingDirectory)/vcpkg/vcpkg.exe install --triplet=${{ target }}
      displayName: vcpkg install ${{ target }}
      workingDirectory: ${{ parameters.vcpkgDir }}
      condition: ne(variables.VCPKG_CACHE_RESTORED, 'true')

    - powershell: |
        mkdir -p ${{ parameters.targetDirectory }} -Force
        Move-Item -Path ${{ parameters.vcpkgDir }}/vcpkg_installed/${{ target }} -Destination ${{ parameters.targetDirectory }}
        Remove-Item ${{ parameters.vcpkgDir }}/vcpkg_installed -Recurse -Force
      displayName: Stage vcpkg dependencies for ${{ target }}
      condition: ne(variables.VCPKG_CACHE_RESTORED, 'true')
